"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mdxPlugin = void 0;
const node_path_1 = require("node:path");
const slash_1 = __importDefault(require("slash"));
const isStorybookMdx = (id) => id.endsWith('stories.mdx') || id.endsWith('story.mdx');
/**
 * Grab the mdx compiler from the @mdx-js/react that comes with @storybook/mdx1-csf,
 * and add it to the top of the code.
 * Equivilent to https://github.com/storybookjs/mdx1-csf/blob/d58cb032a8902b3f24ad487b6a7aae11ba8b33f6/loader.js#L12-L16
 */
function injectRenderer(code) {
    const mdxReactPackage = (0, slash_1.default)((0, node_path_1.dirname)(require.resolve('@mdx-js/react/package.json', {
        paths: [(0, node_path_1.dirname)(require.resolve('@storybook/mdx1-csf/package.json'))],
    })));
    return `
    import { mdx } from '${mdxReactPackage}';
    ${code}
    `;
}
/**
 * Storybook uses two different loaders when dealing with MDX:
 *
 * - *stories.mdx and *story.mdx are compiled with the CSF compiler
 * - *.mdx are compiled with the MDX compiler directly
 *
 * @see https://github.com/storybookjs/storybook/blob/next/addons/docs/docs/recipes.md#csf-stories-with-arbitrary-mdx
 */
function mdxPlugin(options) {
    const { features } = options;
    return {
        name: 'storybook-vite-mdx-plugin',
        enforce: 'pre',
        async transform(src, id) {
            if (id.match(/\.mdx?$/)) {
                // @ts-ignore
                const { compile } = (features === null || features === void 0 ? void 0 : features.previewMdx2)
                    ? await Promise.resolve().then(() => __importStar(require('@storybook/mdx2-csf')))
                    : await Promise.resolve().then(() => __importStar(require('@storybook/mdx1-csf')));
                // TODO: we don't currently support setting mdx options.  Storybook 7.0 does
                const mdxCode = String(await compile(src, { skipCsf: !isStorybookMdx(id) }));
                const code = (features === null || features === void 0 ? void 0 : features.previewMdx2) ? mdxCode : injectRenderer(mdxCode);
                return {
                    code,
                    map: null,
                };
            }
        },
    };
}
exports.mdxPlugin = mdxPlugin;
//# sourceMappingURL=mdx-plugin.js.map