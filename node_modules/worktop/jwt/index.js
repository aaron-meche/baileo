const e = require('worktop/base64');const r = require('worktop/buffer');const t = require('worktop/crypto');var i=new Error("Invalid token"),n=new Error("Expired token");function a(t){return e.base64url(r.toBinary(r.asUTF8(JSON.stringify(t))))}function o(t){return e.base64url(r.toBinary(t))}function s(e){return JSON.parse(r.toUTF8(r.asBinary(e)))}function p(r){let t=r.split(".");if(3!==t.length)throw i;try{let r=e.decode(t[1]);var n=s(e.decode(t[0])),a=s(r)}catch(e){throw i}return{header:n,payload:a,signature:t[2]}}function y(e,r,t){return r.iat=r.iat||Date.now()/1e3|0,null==r.exp&&null!=t&&(r.exp=r.iat+t),e+"."+a(r)}function u(e,r){let t=p(r),a=t.payload;if(!r.startsWith(e+"."))throw i;if(null!=a.exp&&a.exp<Date.now()/1e3)throw n;return t}function l(e,r,t){let{kid:i,typ:n,header:o,...s}=t,p={...o,alg:e+r,typ:n||"JWT"};return null!=i&&(p.kid=i),{header:a(p),config:s}}function d(e,r){let n,{key:a,expires:s,...p}=r,{header:d,config:c}=l("HS",e,p);return n={async sign(r){let i=y(d,{...c,...r},s);return i+"."+o(await t.HMAC(`SHA-${e}`,a,i))},async verify(e){let r=u(d,e);if(await n.sign(r.payload)!==e)throw i;return r.payload}}}function c(n,a){let{privkey:s,pubkey:p,expires:d,...c}=a,{header:f,config:w}=l("RS",n,c),h="RSASSA-PKCS1-v1_5",b={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${n}`};return{async sign(e){let i=await crypto.subtle.importKey("pkcs8",r.asPEM(s),b,!1,["sign"]),n=y(f,{...w,...e},d);return n+"."+o(await t.sign(h,i,n))},async verify(n){let[a,o,s]=n.split("."),y=u(f,n),l=a+"."+o,d=r.asBinary(e.decode(s)),c=await crypto.subtle.importKey("spki",r.asPEM(p),b,!1,["verify"]);if(await t.verify(h,c,l,d))return y.payload;throw i}}}function f(n,a){let{privkey:s,pubkey:p,expires:d,...c}=a,{header:f,config:w}=l("ES",n,c),h={name:"ECDSA",namedCurve:`P-${n}`},b={name:"ECDSA",hash:`SHA-${n}`};return{async sign(e){let i=await crypto.subtle.importKey("pkcs8",r.asPEM(s),h,!1,["sign"]),n=y(f,{...w,...e},d);return n+"."+o(await t.sign(b,i,n))},async verify(n){let[a,o,s]=n.split("."),y=u(f,n),l=a+"."+o,d=r.asBinary(e.decode(s)),c=await crypto.subtle.importKey("spki",r.asPEM(p),h,!1,["verify"]);if(await t.verify(b,c,l,d))return y.payload;throw i}}}var w=d.bind(0,"256"),h=d.bind(0,"384"),b=d.bind(0,"512"),S=c.bind(0,"256"),g=c.bind(0,"384"),k=c.bind(0,"512"),v=f.bind(0,"256"),m=f.bind(0,"384"),A=f.bind(0,"512");exports.ES256=v;exports.ES384=m;exports.ES512=A;exports.EXPIRED=n;exports.HS256=w;exports.HS384=h;exports.HS512=b;exports.INVALID=i;exports.RS256=S;exports.RS384=g;exports.RS512=k;exports.decode=p;