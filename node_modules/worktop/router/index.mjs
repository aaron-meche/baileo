import{parse as e}from"regexparam";import{finalize as r,STATUS_CODES as n}from"worktop/response";function t(...e){return async function(r,n){let t,a;for(t of e)if(a=await t(r,n))return a}}function a(){let t,a,s={};return t={add(r,n,t){let a=s[r];if(void 0===a&&(a=s[r]={__d:new Map,__s:{}}),n instanceof RegExp)a.__d.set(n,{keys:[],handler:t});else if(/[:|*]/.test(n)){const{keys:r,pattern:s}=e(n);a.__d.set(s,{keys:r,handler:t})}else a.__s[n]={keys:[],handler:t}},mount(e,r){a=a||{},a[e]=r.run},onerror(e,r){let{error:t,status:a=500}=r,s=t&&t.message||n[a];return new Response(s||String(a),{status:a})},async run(e,n){try{var o,i=[];(n=n||{}).url=new URL(e.url),n.defer=e=>{i.push(e)},n.bindings=n.bindings||{};var u=t.prepare&&await t.prepare(e,n);if(u&&u instanceof Response)return u;let f,l=n.url.pathname,p=l+"/";if(a&&l.length>1)for(f in a)if(p.startsWith(f))return n.url.pathname=l.substring(f.length)||"/",u=await a[f](new Request(n.url.href,e),n);if(f=function(e,r,n){let t,a,s,o,i,u={};if(a=e[r]){if(t=a.__s[n])return{params:u,handler:t.handler};for([s,o]of a.__d)if(i=s.exec(n),null!==i){if(void 0!==i.groups)for(t in i.groups)u[t]=i.groups[t];else if(o.keys.length>0)for(t=0;t<o.keys.length;)u[o.keys[t++]]=i[t];return{params:u,handler:o.handler}}}}(s,e.method,l),!f)return n.status=404,u=await t.onerror(e,n);n.params=f.params,u=await f.handler(e,n)}catch(r){n.status=500,n.error=r,u=await t.onerror(e,n)}finally{for(u=new Response(u?u.body:"OK",u);o=i.pop();)await o(u);return r(u,"HEAD"===e.method)}}}}export{a as Router,t as compose};